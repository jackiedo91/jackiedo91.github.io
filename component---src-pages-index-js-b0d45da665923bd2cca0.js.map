{"version":3,"sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/tags_of_post.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"names":["data","useStaticQuery","author","site","siteMetadata","social","className","S","layout","formats","src","width","height","quality","alt","name","href","github","summary","tagNames","tags","map","tag","replace","tagName","location","siteTitle","title","posts","allMarkdownRemark","nodes","length","style","listStyle","post","frontmatter","fields","slug","key","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt"],"mappings":"q6BAyDA,IA9CY,WAAO,IAAD,IACVA,GAAOC,oBAAe,aAiBtBC,EAAM,UAAGF,EAAKG,KAAKC,oBAAb,aAAG,EAAwBF,OACjCG,EAAM,UAAGL,EAAKG,KAAKC,oBAAb,aAAG,EAAwBC,OAEvC,OACE,uBAAKC,UAAU,OACb,gBAAC,EAAAC,EAAD,CACED,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,4BACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBARN,uBAUCZ,aAAA,EAAAA,EAAQa,OACP,2CAEE,qBAAGC,KAAOX,aAAH,EAAGA,EAAQY,QAChB,8BAASf,EAAOa,QAEjBb,aAAA,EAAAA,EAAQgB,UAAW,S,qIC/B9B,EAhBmB,SAAC,GAAc,IAC1BC,EADyB,EAAXC,KACEC,KAAI,SAAAC,GAExB,OADuBA,EAAIC,QAAQ,IAAK,QAI1C,OACE,uBAAKjB,UAAU,kBACXa,EAASE,KAAI,SAAAG,GACb,OAAO,qBAAGlB,UAAU,WAAWU,KAAI,SAAWQ,GAAaA,QC0DnE,EA7DkB,SAAC,GAAwB,IAAD,EAArBxB,EAAqB,EAArBA,KAAMyB,EAAe,EAAfA,SACnBC,GAAY,UAAA1B,EAAKG,KAAKC,oBAAV,eAAwBuB,QAAxB,QACZC,EAAQ5B,EAAK6B,kBAAkBC,MAErC,OAAqB,IAAjBF,EAAMG,OAEN,gBAAC,IAAD,CAAQN,SAAUA,EAAUE,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,cACX,gBAAC,IAAD,MACA,uLAUJ,gBAAC,IAAD,CAAQF,SAAUA,EAAUE,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,cACX,gBAAC,IAAD,MACA,sBAAIK,MAAO,CAAEC,UAAU,SACpBL,EAAMP,KAAI,SAAAa,GACT,IAAMP,EAAQO,EAAKC,YAAYR,OAASO,EAAKE,OAAOC,KAC9CjB,EAAOc,EAAKC,YAAYf,KAE9B,OACE,sBAAIkB,IAAKJ,EAAKE,OAAOC,MACnB,2BACE/B,UAAU,iBACViC,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAC,KAAD,CAAMC,GAAIR,EAAKE,OAAOC,KAAMM,SAAS,OACnC,wBAAMA,SAAS,YAAYhB,KAG/B,6BAAQO,EAAKC,YAAYS,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQZ,EAAKC,YAAYY,aAAeb,EAAKc,SAE/CL,SAAS,iBAIb,gBAAC,EAAD,CAAYvB,KAAMA","file":"component---src-pages-index-js-b0d45da665923bd2cca0.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            github\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"AUTO\", \"WEBP\", \"AVIF\"]}\n        src=\"../images/profile-pic.jpg\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          Được viết bởi &nbsp;\n          <a href={ social?.github }>\n            <strong>{author.name}</strong>\n          </a>\n          {author?.summary || null}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\n// import { siteMetadata } from \"../../gatsby-config\"\n\nconst TagsOfPost = ({ tags }) => {\n  const tagNames = tags.map(tag => {\n    let convertedTagName = tag.replace(' ', '-')\n    return convertedTagName\n  })\n\n  return (\n    <div className=\"tag__container\">\n      { tagNames.map(tagName => {\n        return <a className=\"tag-item\" href={`/tags/${tagName}`}>{ tagName }</a>\n      })\n      }\n    </div>\n  )\n}\n\nexport default TagsOfPost","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\n// Import components\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport TagsOfPost from \"../components/tags_of_post\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Seo title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"All posts\" />\n      <Bio />\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n          const tags = post.frontmatter.tags\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n\n                <TagsOfPost tags={tags}/>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          tags\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}